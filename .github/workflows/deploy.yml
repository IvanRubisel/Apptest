name: Test and Deploy to Master

on:
  push:
    branches:
      - develop

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '21'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Run tests
        id: run-tests
        run: |
          mkdir -p ./test-results
          npm test > ./test-results/test-results.xml || exit 1

      - name: Save test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ./test-results/test-results.xml

      - name: Send test results to ClickUp
        if: always()
        env:
          CLICKUP_API_TOKEN: ${{ secrets.CLICKUP_API_TOKEN }}
          CLICKUP_LIST_ID: ${{ secrets.CLICKUP_LIST_ID }}
        run: |
          # Leer el archivo de resultados
          TEST_RESULTS=$(cat ./test-results/test-results.xml)

          # Limitar la longitud de la descripci√≥n si es muy extensa
          TEST_RESULTS_SHORT=$(echo "$TEST_RESULTS" | head -c 3000)

          # Crear payload para ClickUp
          PAYLOAD=$(jq -n \
            --arg name "Test Results $(date '+%Y-%m-%d %H:%M:%S')" \
            --arg description "Resultados de las pruebas:\n\n\`\`\`\n$TEST_RESULTS_SHORT\n\`\`\`" \
            --arg status "Open" \
            '{name: $name, description: $description, status: $status}')

          # Enviar solicitud a ClickUp
          curl -X POST "https://api.clickup.com/api/v2/list/${CLICKUP_LIST_ID}/task" \
            -H "Authorization: ${CLICKUP_API_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD"

      - name: Merge to master and create tag
        if: steps.run-tests.outcome == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Hacer merge a la rama master con preferencia por los cambios de develop
          git fetch origin master
          git checkout master
          git merge origin/develop --no-ff --allow-unrelated-histories -X theirs -m "Auto-merge from develop to master (tests passed)"

          # Crear un tag con la fecha y hora
          TAG="v$(date +'%Y%m%d%H%M%S')"
          git tag $TAG

          # Autenticarse usando el Personal Access Token para el push
          git push https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/IvanRubisel/Apptest.git master
          git push https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/IvanRubisel/Apptest.git $TAG
